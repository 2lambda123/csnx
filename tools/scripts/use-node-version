#!/usr/bin/env bash

# Check whether the current node version matches the .nvmrc version.
#
# If not, try to use a locally installed node version manager to set the correct
# version.
#
# Note that we're not checking all possible nvmrc values, just ones that match
# $(node -v) format (semver).

# helpers for message styling
blue='\033[0;34m'
red='\033[0;31m'
dim='\033[2m'
bold='\033[1m'
reset='\033[0m'

nvmrc_version=$(cat .nvmrc)
node_version="no Node at all"

# check if we're using het correct version of node (if any)
using_correct_node() {
	# is _any_ node available?
	if [[ -x "$(command -v node)" ]]; then
		# If asdf is loaded, but not the correct version of node, it errors when
		# you try to use `node` with a message about installing the right
		# version. If we find this, we're going to install it ourselves, so we
		# suppress the warning with the "2>/dev/null) || true" bit
		node_version=$(node -v 2>/dev/null) || true
		node_version=${node_version:1} # remove the "v" in "v1.2.3"
	fi
	if [ "$node_version" == "$nvmrc_version" ]; then
		echo -e "Using Node ${blue}$node_version${reset}"
		return 0
	else
		# this will also be false if no node is installed
		return 1
	fi
}

# try to load the correct version of node using a local node version manager (if
# there is one)
load_correct_node() {
	# try using asdf
	if asdf_installed; then
		install_with_asdf
		echo -e "Using Node ${blue}$(node -v)${reset}"
		return 0
	fi

	# try using fnm
	if fnm_installed; then
		install_with_fnm
		return 0
	fi

	# try using nvm
	if nvm_installed; then
		install_with_nvm
		return 0
	fi

	# can't find a version manager
	return 1
}

asdf_installed() {
	if [[ -x "$(command -v asdf)" ]]; then
		return 0
	fi

	# if we're in a non-interative shell (e.g. a git gui – vscode, github
	# desktop, etc), asdf may not have been loaded, so try to load it

	# if installed from git
	if [[ -f "$HOME/.asdf/asdf.sh" ]] ; then
		source $HOME/.asdf/asdf.sh
		return 0
	fi

	# if installed on apple silicon with brew
	if [[ -f "/opt/homebrew/opt/asdf/asdf.sh" ]] ; then
		source /opt/homebrew/opt/asdf/asdf.sh
		return 0
	fi

	# if installed on intel with brew
	if [[ -f "/usr/local/opt/asdf/libexec/asdf.sh" ]] ; then
		source /usr/local/opt/asdf/libexec/asdf.sh
		return 0
	fi

	# can't find asdf
	return 1
}

install_with_asdf() {
	echo -e "${dim}Installing Node v$nvmrc_version with ${blue}asdf${reset}"
	asdf install
}

fnm_installed() {
	if [[ -x "$(command -v fnm)" ]]; then
		# if we're in a non-interative shell (e.g. a git gui – vscode, github
		# desktop, etc), fnm may not have been loaded, so try to load it
		if [[ $PATH != *"$HOME/.fnm"* ]]; then
			export PATH=~/.fnm:$PATH
			eval "`fnm env`"
		fi
		return 0
	fi

	# can't find fnm
	return 1
}

install_with_fnm() {
	fnm use --install-if-missing
}

nvm_installed() {
	if [[ -x "$(which nvm)" ]]; then
		return 0
	fi
	# if we're in a non-interative shell (e.g. a git gui – vscode, github
	# desktop, etc), nvm will not have been loaded, so try to load it
	if [[ -f "$HOME/.nvm/nvm.sh" ]]; then
		export NVM_DIR="$HOME/.nvm"
		[ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh" --no-use
		return 0
	fi

	# can't find nvm
	return 1
}

install_with_nvm() {
	# check if nvm has already installed the version we need taken from
	# https://github.com/nvm-sh/nvm#bash
	existing_installation=$(nvm ls --no-colors "$nvmrc_version" | tail -1 | tr -d '\->*' | tr -d '[:space:]')

	if [[ "$existing_installation" == "N/A" ]]; then
		echo -e "${dim}Installing Node v$nvmrc_version with ${blue}nvm${reset}"
		nvm install "$nvmrc_version"
	else
		# echo -e "Using Node ${blue}$(node -v)${reset}"
		nvm use "$nvmrc_version"
	fi
}

using_correct_node || load_correct_node || {
	# we've run out of options so just warn the user and exit
	echo -e "${red}Could not find the required Node version (v$nvmrc_version)${reset}"
	echo -e "${dim}Consider using ${bold}fnm${reset}${dim} to manage Node versions:${reset} ${blue}https://github.com/Schniz/fnm#installation${reset}"
	exit 1
}

